import datetime

class SingletonMeta(type):
    _instance = None

    def __new__(cls, *args, **kwargs):
        if cls._instance is None:
            cls._instance = super().__new__(cls, *args, **kwargs)
        return cls._instance

class OfficeConfiguration(metaclass=SingletonMeta):
    def __init__(self):
        self.rooms = {}
        self.observers = []

    def configure_rooms(self, num_rooms):
        for i in range(1, num_rooms + 1):
            self.rooms[i] = {
                "max_capacity": 10,  # Default max capacity
                "is_occupied": False,
                "occupants": 0,
                "booking_start": None,
                "booking_end": None,
            }

    def get_room_status(self, room_number):
        return self.rooms[room_number]

    def set_room_max_capacity(self, room_number, max_capacity):
        self.rooms[room_number]["max_capacity"] = max_capacity

    def add_observer(self, observer):
        self.observers.append(observer)

class RoomObserver:
    def __init__(self, room_number):
        self.room_number = room_number
        OfficeConfiguration().add_observer(self)

    def update(self, room_number, is_occupied):
        if room_number == self.room_number:
            if is_occupied:
                self.turn_on_ac_and_lights()
            else:
                self.turn_off_ac_and_lights()

    def turn_on_ac_and_lights(self):
        print(f"Room {self.room_number}: AC and lights turned on.")

    def turn_off_ac_and_lights(self):
        print(f"Room {self.room_number}: AC and lights turned off.")

class BookingCommand:
    def __init__(self, room_number, start_time, duration):
        self.room_number = room_number
        self.start_time = start_time
        self.duration = duration

    def execute(self):
        room = OfficeConfiguration().get_room_status(self.room_number)
        if room["is_occupied"]:
            print(f"Room {self.room_number} is already occupied.")
        elif room["booking_start"] and room["booking_end"] > datetime.datetime.now():
            print(f"Room {self.room_number} is already booked until {room['booking_end']}.")
        else:
            room["booking_start"] = self.start_time
            room["booking_end"] = self.start_time + datetime.timedelta(minutes=self.duration)
            print(f"Room {self.room_number} booked from {self.start_time} to {room['booking_end']}.")

class CancellationCommand:
    def __init__(self, room_number):
        self.room_number = room_number

    def execute(self):
        room = OfficeConfiguration().get_room_status(self.room_number)
        if not room["booking_start"]:
            print(f"Room {self.room_number} is not booked.")
        else:
            room["booking_start"] = None
            room["booking_end"] = None
            print(f"Booking for Room {self.room_number} cancelled.")

class OccupancyCommand:
    def __init__(self, room_number, num_occupants):
        self.room_number = room_number
        self.num_occupants = num_occupants

    def execute(self):
        room = OfficeConfiguration().get_room_status(self.room_number)
        if self.num_occupants >= 2:
            room["is_occupied"] = True
            room["occupants"] = self.num_occupants
        else:
            room["is_occupied"] = False
            room["occupants"] = 0

        for observer in OfficeConfiguration().observers:
            observer.update(self.room_number, room["is_occupied"])

if __name__ == "__main__":
    office_config = OfficeConfiguration()
    office_config.configure_rooms(3)

    # Example usage:
    office_config.set_room_max_capacity(1, 10)
    office_config.configure_rooms(3)  # Configure 3 rooms
    BookingCommand(1, datetime.datetime.now(), 60).execute()
    OccupancyCommand(1, 3).execute()
    CancellationCommand(1).execute()
